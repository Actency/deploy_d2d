<?php

/**
 * Actency custom module to take nodes from a source and deploy them into a destination
 *
 * @author Manuel Grosrenaud
 * @author Pierre Lesbazeilles
 *
 * @todo
 * - vbo implementation    (enrich node selection mechanism befor export)
 * - manage taxonomy voc
 * - extend uuid to others entities than only nodes
 * - implement some logs
 */

/**
 * Implements hook_help().
 *
 * Show some help on each form provided by this module.
 */
function deploy_d2d_help($path) {
  $output = '';
  switch ($path) {
    case 'deploy_d2d/import-export/import':
      $output = t('Generate files in public://import');
      break;

    case 'deploy_d2d/import-export/export':
      $output = t('Load file in public://export and saves nodes ');
      break;
  }
  return $output;
}

/**
 * Implements hook_menu()
 */
function deploy_d2d_menu() {
  $items['admin/deploy_d2d/import-export'] = array(
    'title' => 'deploy_d2d',
    'description' => 'deploy_d2d.',
    'page callback' => 'deploy_d2d_deploy_page',
    'access arguments' => array('access administration pages'),

  );
  $items['admin/deploy_d2d/import-export/import'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('deploy_d2d_import_form'),
    'access arguments' => array('access content'),
    'title' => 'import',
  );
  $items['admin/deploy_d2d/import-export/export'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('deploy_d2d_export_form'),
    'access arguments' => array('access content'),
    'title' => 'export',
  );
  return $items;
}

/**
 * Menu callbacks
 */
function deploy_d2d_deploy_page() {
  $output = l('import', 'admin/deploy_d2d/import-export/import');
  $output .= '<br/>' . l('export', 'admin/deploy_d2d/import-export/export');
  return $output;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function deploy_d2d_export_form($form, &$form_state) {


  $form['submit'] = array('#type' => 'submit', '#value' => t('Export'));
  return $form;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function deploy_d2d_import_form($form, &$form_state) {
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#weight' => -5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['options']['delete_atom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete all Sclad Atom before import.'),
    '#return_value' => 1,
    '#default_value' => 0,
  );
  $form['options']['preserve_atom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Preserve SIDs before import.'),
    '#return_value' => 1,
    '#default_value' => 1,
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Import'));
  return $form;
}

/**
 * @param $form
 * @param $form_state
 */
function deploy_d2d_export_form_submit($form, &$form_state) {
$taxos = $taxo_order = $vocabs = $users = $menu_links = array();
  $output='Files generate <br/>';
  $file = DRUPAL_ROOT . '/includes/utility.inc';
  if (is_file($file)) {
    require_once $file;
  }

  //export entities
  $entities_export=array('taxonomy_term', 'user', 'scald_atom' );
  foreach($entities_export as $entitie_export){
    $entities = entity_load($entitie_export);
    file_put_contents('public://export/'.$entitie_export.'.export', drupal_var_export($entities));
    $output .= l($entitie_export.'.export',file_create_url('public://export/'.$entitie_export.'.export')).'<br/>';
  }
  //files need absolute url
  $files = deploy_d2d_get_files();
  file_put_contents('public://export/file.export', drupal_var_export($files));
  $output.= l('file.export',file_create_url('public://export/file.export')).'<br/>';
  drupal_set_message(t('Export: succeeded (files are in public://export/)'));
  drupal_set_message($output);
}

/**
 * @param $form
 * @param $form_state
 */
function deploy_d2d_import_form_submit($form, &$form_state) {
  $preserve_sid = ($form_state['values']['preserve_atom'] == 1) ? TRUE : FALSE;
  $delete_atoms = ($form_state['values']['delete_atom'] == 1) ? TRUE : FALSE;
  batch_deploy_import($preserve_sid,$delete_atoms);

}

/**
 * @param $preserve_sid
 * @param $url_to_download
 * @param bool $delete_atom
 */
function batch_deploy_import($preserve_sid, $delete_atoms) {
  $operation=array();


  if ($delete_atoms) {
    //delete all atoms
    $sids = deploy_d2d_get_atoms();
    foreach( $sids as  $sid){
      $operation[] = array('batch_deploy_delete_atom', array($sid));
    }
    //truncate table scald_atoms
    $operation[] = array('batch_truncate_atom_table', array());
    drupal_set_message(t('Delete @countsid Scald atoms', array('@countsid' => count($sids))));
  }

  // Get data
  $scald_file_import = file_get_contents('public://import/scald_atom.export');
  $scalds_import = deploy_d2d_drupal_import($scald_file_import);
  // Import scald
  foreach ($scalds_import as $current_scald) {
     $operation[] = array('deploy_d2d_process_scald_import', array($current_scald->sid,$preserve_sid));
  }
  drupal_set_message(t('Import @countsid Scald atoms', array('@countsid' => count($scalds_import))));

  $batch = array(
    'operations' => $operation,
    'finished' => ' batch_deploy_finished',
    'init_message' => t('Start import Atoms.'),
    'progress_message' => t('Processed @current out of @total.'),

  );
  batch_set($batch);
}



/**
 * Batch 'finished' callback
 */
function batch_deploy_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = count($results) .' processed.';
    $message .= theme('item_list', $results);  // D6 syntax
    drupal_set_message($message);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }

}



/**
 * Import callback.
 */
function deploy_d2d_drupal_import($code_string) {
  if (substr(ltrim($code_string), 0, 6) == "array(") {
    $nodes = eval('return ' . $code_string . ';');
    if (is_array($nodes)) {
      return deploy_d2d_drupal_decode_objects($nodes);
    }
  }
}

/**
 * Recursively convert arrays back to objects.
 *
 * This is only for backwards compatibility with the deprecated node_code format.
 */
function deploy_d2d_drupal_decode_objects($array) {
  foreach ($array as $k => $v) {
    if (is_array($v)) {
      $array[$k] = deploy_d2d_drupal_decode_objects($v);
    }
  }
  if (isset($array['#_export_node_encode_object'])) {
    unset($array['#_export_node_encode_object']);
    $array = (object) $array;
  }
  return $array;
}


/**
 * @param null $nids
 * @return array
 */
function deploy_d2d_get_files(){
  $files = array();
  $result = db_query('SELECT m.fid FROM {file_managed} m');
  foreach ($result as $row) {
    if ($file = file_load($row->fid)) {
      $files[$file->fid] = (array) $file;
      $files[$file->fid]['url'] = file_create_url($file->uri);
    }
  }
  return $files;
}

/**
 * Get all atoms Sid in database
 * @return mixed
 */
function deploy_d2d_get_atoms() {
  return db_select('scald_atoms', 'atoms')
    ->fields('atoms', array('sid'))
    ->execute()
    ->fetchCol();
}


/**
 * @param $context
 */
function batch_truncate_atom_table(&$context) {
  //Truncate table automatically reset the Autoincrement values to 0.
  db_truncate('scald_atoms')->execute();
  drupal_set_message(t('truncate table scald_atoms'));
  $context['message'] = t('Now truncating table scald_atoms');
}

/**
 * @param $sid
 * @param $context
 */
function batch_deploy_delete_atom($sid,&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
  }
  scald_atom_delete($sid);
  $context['message'] = t('Now deleting  atom sid  #%sid', array('%sid' => $sid));
}
/**
 * @param $sid
 * @param $preserve_sid
 * @param array $scalds
 * @param $context
 * @return bool
 * @throws Exception
 */
function deploy_d2d_process_scald_import($sid, $preserve_sid, &$context = array()) {

  $context['message'] = t('Now importing atom sid #%sid', array('%sid' => $sid));

  $scald_file_import = file_get_contents('public://import/scald_atom.export');
  $scalds_import = deploy_d2d_drupal_import($scald_file_import);

  $taxo_file_import = file_get_contents('public://import/taxonomy_term.export');
  $taxo_import = deploy_d2d_drupal_import($taxo_file_import);

  $users_file_import = file_get_contents('public://import/user.export');
  $user_import =  deploy_d2d_drupal_import($users_file_import);

  $files_file_import = file_get_contents('public://import/file.export');
  $file_import = deploy_d2d_drupal_import($files_file_import);

  $scald = $scalds_import[$sid];
  $scald_destination = clone $scald;

  if (!$preserve_sid) {
      unset($scald_destination->sid);
  } else {
      scald_atom_delete($scald_destination->sid);
      //insert values with protect sid
      db_insert('scald_atoms')// Table name no longer needs {}
      ->fields(array(
        'sid' => $scald_destination->sid,
        'provider' => $scald_destination->provider,
        'type' => $scald_destination->type,
        'base_id' => $scald_destination->base_id,
        'language' => $scald_destination->language,
        'publisher' => $scald_destination->publisher,
        'actions' => $scald_destination->actions,
        'title' => $scald_destination->title,
        'data' => serialize($scald_destination->data),
        'created' => REQUEST_TIME,
        'changed' => REQUEST_TIME,
      ))->execute();
    }
    if ($scald_destination->provider == "scald_apios_migrate") {
      $scald_destination->provider = "scald_opa";
    }

    $user = $user_import[$scald->publisher];
    if ($user->uid) {
      $scald_destination->publisher = $user->uid;
    }

    foreach ($scald_destination as $field_name => $field) {
      if (substr($field_name, 0, 5) == 'field' ||
        $field_name == 'base_entity' ||
        substr($field_name, 0, 5) == 'scald'
      ) {
        $field_info = field_info_field($field_name);
        switch ($field_info['type']) {
          case 'image':
            if (isset($scald_destination->{$field_name}[LANGUAGE_NONE][0])) {
              foreach ($scald_destination->{$field_name}[LANGUAGE_NONE] as $k => $image) {
                $fid = $scald_destination->{$field_name}[LANGUAGE_NONE][$k]['fid'];
                $new_file = deploy_d2d_check_file($fid, $file_import);
                if ($fid && $new_file) {
                  $scald_destination->{$field_name}[LANGUAGE_NONE][$k] = (array) $new_file;
                }
              }
            }
            break;
          case 'taxonomy_term_reference':
            if (isset($scald_destination->{$field_name}[LANGUAGE_NONE][0])) {
              foreach ($scald_destination->{$field_name}[LANGUAGE_NONE] as $k => $tid) {
                if (isset($tid['tid'])) {
                  $ref_tid = (int) $tid['tid'];
                  if (!array_key_exists($ref_tid, $context['taxos'])) {
                    if (array_key_exists($ref_tid, $taxo_import)) {
                      $context['taxos'][$ref_tid] = deploy_d2d_check_taxo($ref_tid, 1, $taxo_import);
                      $scald_destination->{$field_name}[LANGUAGE_NONE][$k]['tid'] = $context['taxos'][$ref_tid]->tid;
                    }
                    else {
                      unset($scald_destination->{$field_name}[LANGUAGE_NONE][$k]);
                    }
                  }
                  else {
                    $scald_destination->{$field_name}[LANGUAGE_NONE][$k]['tid'] = $context['taxos'][$ref_tid]->tid;
                  }
                }
              }
            }
            break;
          default:
            break;
        }
      }
    }
    try {
      scald_atom_save($scald_destination);
    } catch (Exception $e) {
      drupal_set_message(t('Atoms id  @sid not saved  due to an unexpected error', array('@sid' => $scald_destination->sid)));
    }
}


/**
 * @param $users_import
 * @return mixed
 */
function deploy_d2d_process_users_import($users_import) {
  $users_destination = array();
  foreach ($users_import as $user) {
    $uid = $user->uid;
    if ($uid > 1) {
      $user_destination = ($user->mail) ? user_load_by_mail(array('mail' => $user->mail)) : FALSE;
      if (!$user_destination || $user_destination->uid == 0) { //pas de user existant je verifie dans les uuid
        if (module_exists('uuid') && function_exists('entity_uuid_load') &&
          $user->uuid && $user_destinationuuuid = entity_uuid_load('user', array($user->uuid))
        ) {
          unset($user->uid);
          $user->uid = $user_destinationuuuid->uid;
          $user->uuid = $user_destinationuuuid->uuid;
          $user_destination = user_save($user);
        }
        else {
          unset($user->uid);
          $user_destination = user_save($user);
        }
      }
      else {
        $user->uid = $user_destination->uid;
        $user_destination = user_save($user);
      }
    }
    else {
      $user_destination = $user;
    }
    $users[$uid] = $user_destination;
  }

  return $users;
}


/**
 * Check if taxo aready exists
  * @param $tid
 * @param $vid
 * @param $taxo_import_order
 * @return stdClass|term
 */
function deploy_d2d_check_taxo($tid, $vid, $taxo_import_order) {
  $term = $taxo_import_order[$tid];
  if (taxonomy_get_term_by_name($term->name, $vid)) {
    $taxo = taxonomy_get_term_by_name($term->name, $vid);
  }
  else {
    $taxo = deploy_d2d_create_taxonomy_term($term->name, $vid, $ptid = 0);
  }
  return $taxo;
}


/**
* Create a taxonomy term  .
 *
 * @param $name
 * @param $vid
 * @param int $ptid
 * @return stdClass|term
 */
function deploy_d2d_create_taxonomy_term($name, $vid, $ptid = 0) {
  $term = new stdClass();
  $term->name = $name;
  $term->vid = $vid;
  if ($ptid != 0) {
    $term->parent = $ptid;
  }
  else {
    $term->parent = NULL;
  }
  taxonomy_term_save($term);
  return $term;
}

/**
 * Check if user aready exists
 * @return stdClass|user
 */
function deploy_d2d_check_user($uid, $users_import_order) {
  $user = clone $users_import_order[$uid];
  if (user_load($user->uid) !== FALSE) {
    $user_local = user_load($user->uid);
    if ($user_local->name == $user->name) {
      return $user;
    }
  }
  return deploy_d2d_create_user($user);
}

/**
 * Create a user and return the uid.
 *  * @return array|user
 */
function deploy_d2d_create_user($user) {
 if ($user->uid>1){
  unset($user->uid);
  user_save($user);
 }
  return $user;
}


/**Check if files exists
 * @param null $fid
 * @param array $fids
 * @return array|bool
 */
function deploy_d2d_check_file($fid = NULL, $fids = array()) {
  $file = $fids[$fid];
  if ($file) {
    $uuid = "";
    if (isset($file->uuid)) {
      $uuid = $file->uuid;
    }
    elseif ($file['uuid']) {
      $uuid = $file['uuid'];
    }

    //check if file exist have universal id (uuid)
    if (module_exists('uuid') && function_exists('entity_uuid_load') && !empty($uuid) && ($file_destination = entity_uuid_load('file', array($uuid)))) {
      return $file_destination;
    }
    //download file
    return download_external_file($file['url'], $file['uri'], FILE_EXISTS_RENAME, TRUE, $uuid);
  }
  return $file;
}

/**
 *
 * param string $url
 *    Full url to file to download
 * param string $uri
 *    Drupal uri of where to save file public://archive/test.pdf
 * param int $save_mode
 *    File save mode from drupal core, ex FILE_EXISTS_REPLACE
 * http://www.patrickjwaters.com/blog/2013-08-22/drupal-7-how-programmatically-download-files-optionally-save-them-managed-files-save
 */
function download_external_file($url, $uri, $save_mode = FILE_EXISTS_RENAME, $manage_file = TRUE, $uuid = "") {
  $url_info = parse_url($url);
  $url_path_info = pathinfo($url_info['path']);

  //This helps with filenames with spaces
  $url = $url_info['scheme'] . '://' . $url_info['host'] . $url_path_info['dirname'] . '/' . rawurlencode($url_path_info['basename']);

  //Need to remove the filename from the uri
  $uri_target = file_uri_target($uri);
  $uri_scheme = file_uri_scheme($uri);
  $uri_path_info = pathinfo($uri_target);
  $directory = file_stream_wrapper_uri_normalize($uri_scheme . "://" . $uri_path_info['dirname']);
  if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    $drupal_result = drupal_http_request($url);
    if (!empty($drupal_result->data) && !isset($drupal_result->error)) {
      $path = file_stream_wrapper_uri_normalize($uri);
      if ($manage_file) {
        $new_file = file_save_data($drupal_result->data, $path, $save_mode);
        if (!empty($uuid) && is_object($new_file) && module_exists('uuid') && function_exists('entity_uuid_load')){
          $new_file->uuid=$uuid;
          $new_file = file_save($new_file);
        }
      }
      else {
        return file_unmanaged_save_data($drupal_result->data, $path, $save_mode);
      }
    }
    else {
      drupal_set_message(t('Error downloading file, no data recieved for @url', array('@url' => $url)));
      return FALSE;
    }

    $new_file->display = 1;
    return $new_file;
  }
  else {
    drupal_set_message(t('Could not create directory @directory', array('@$directory' => $directory)));
  }
}

